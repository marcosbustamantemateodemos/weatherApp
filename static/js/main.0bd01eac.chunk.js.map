{"version":3,"sources":["components/Location.js","components/WeatherExtraInfo.js","components/WeatherTemperature.js","constant/weather.js","components/WeatherData.js","services/transformWeather.js","constant/api_url.js","services/getUrlWeatherByCity.js","services/getUrlByCoord.js","components/WeatherLocation.js","components/LocationList.js","App.js","serviceWorker.js","index.js"],"names":["Location","props","city","className","WeatherExtraInfo","humidity","wind","icons","WeatherTemperature","temperature","weatherState","icon","name","size","getWeatherIcon","WeatherData","data","transformWeather","weather_data","kelvin","main","temp","speed","weather","id","getWeatherState","Number","convert","from","to","toFixed","api_key","getUrlWeatherByCity","url_base_weather","getUrlWeatherByCoord","coords","latitude","longitude","WeatherLocation","updateWeatherByCity","api_weather","state","fetch","then","response","json","newData","setState","updateWeatherByCoord","coord","error","console","log","this","onWeatherLocationClick","ciudad","onClick","Component","LocationList","getLocation","navigator","geolocation","getCurrentPosition","onSelectedLocation","cities","onSelectedLocationByCoord","map","index","key","dataCities","require","App","handleAddWeatherLocation","paramSearch","paramApplied","filter","element","toUpperCase","length","autocomplete","placeHolder","tickTock","seconds","secondsInterval","handleSelectionLocation","handleSelectionLocationByCoord","setInterval","container","spacing","item","xs","type","onChange","text","target","value","placeholder","country","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bd01eac.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Location = (props) => {\r\n\r\n    const { city }  = props;\r\n\r\n    return (\r\n        <div className='locationContainer'>\r\n            <h1>{city}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nLocation.propTypes = {\r\n    city: PropTypes.string.isRequired  \r\n};\r\n\r\nexport default Location;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './estilos.css';\r\n\r\nconst WeatherExtraInfo = (props) => {\r\n\r\n    const { humidity, wind } = props; \r\n\r\n    return (\r\n        <div className='weatherExtraInfoContainer'>\r\n            <span className='extraInfoText'>{'Humedad: ' + humidity + '%'}</span>\r\n            <span className='extraInfoText'>{'Vientos: ' + wind}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nWeatherExtraInfo.propTypes = {\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherExtraInfo;","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport PropTypes from 'prop-types';\r\nimport './estilos.css';\r\nimport { \r\n    CLOUD,\r\n    SUN,\r\n    RAIN,\r\n    THUNDER,\r\n    DRIZZLE,\r\n    SNOW \r\n} from './../constant/weather';\r\n\r\nconst icons = {\r\n    [SUN]: 'day-sunny',\r\n    [CLOUD]: 'cloud',\r\n    [SNOW]: 'snow',\r\n    [THUNDER]: 'day-thunderstore',\r\n    [RAIN]: 'rain',\r\n    [DRIZZLE]: 'day-showers'\r\n};\r\n\r\nconst iconsKeysArray = Object.keys(icons);\r\n\r\nconst getWeatherIcon = weatherState => {\r\n\r\n    const icon = icons[weatherState];\r\n\r\n    if (icon) {\r\n\r\n        return (\r\n            <WeatherIcons className='wicon' name={icon} size='2x' />\r\n        )\r\n    } else {\r\n        return (\r\n            <p>Error: weatherState not correct</p>\r\n        ) \r\n    }   \r\n};\r\n\r\nconst WeatherTemperature = (props) => {\r\n\r\n    const { temperature, weatherState } = props; \r\n\r\n    return (\r\n        <div className='weatherTemperatureContainer'>\r\n            {\r\n                getWeatherIcon(weatherState)\r\n            }\r\n            <span className='temperature'>\r\n                {' ' + temperature}\r\n            </span>\r\n            <span className='temperatureType'>\r\n                {' â„ƒ'}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nWeatherTemperature.propTypes = {\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.oneOf(iconsKeysArray)\r\n};\r\n\r\nexport default WeatherTemperature;","export const CLOUD = 'cloud';\r\nexport const SUN = 'sun';\r\nexport const RAIN = 'rain';\r\nexport const SNOW = 'snow';\r\nexport const THUNDER = 'thunder';\r\nexport const DRIZZLE = 'drizzle';","import React from 'react';\r\nimport WeatherExtraInfo from './WeatherExtraInfo';\r\nimport WeatherTemperature from './WeatherTemperature';\r\nimport PropTypes from 'prop-types';\r\nimport './estilos.css';\r\n\r\nconst WeatherData = (props) => {\r\n\r\n    const { data: { temperature, weatherState, humidity, wind } } = props;\r\n\r\n    return (\r\n        <div className='weatherDataContainer'>\r\n            <WeatherTemperature temperature={temperature} weatherState={weatherState} />\r\n            <WeatherExtraInfo humidity={humidity} wind={wind} />\r\n        </div>\r\n    );\r\n}\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind:PropTypes.string.isRequired\r\n    })\r\n};\r\n\r\nexport default WeatherData;","import convert from 'convert-units';\r\nimport {\r\n    CLOUD,\r\n    SUN,\r\n    RAIN,\r\n    THUNDER,\r\n    DRIZZLE,\r\n    SNOW\r\n} from './../constant/weather';\r\n\r\nconst getTemp = kelvin => {\r\n\r\n    return Number(convert(kelvin).from('K').to('C').toFixed(2));\r\n}\r\n\r\nconst getWeatherState = weather => {\r\n\r\n    const { id } = weather;\r\n\r\n    if (id < 300) {\r\n\r\n        return THUNDER;\r\n\r\n    } else if (id < 400) {\r\n\r\n        return DRIZZLE;\r\n\r\n    } else if (id < 600) {\r\n        \r\n        return RAIN;\r\n\r\n    } else if (id < 700) {\r\n\r\n        return SNOW;\r\n\r\n    } else if (id === 800) {\r\n\r\n        return SUN;\r\n    } else {\r\n        return CLOUD;\r\n    }\r\n}\r\n\r\nconst transformWeather = weather_data => {\r\n\r\n    const { name: city } = weather_data;\r\n    const { humidity, temp } = weather_data.main;\r\n    const { speed } = weather_data.wind;\r\n    const weatherState = getWeatherState(weather_data.weather[0]);\r\n    const temperature =  getTemp(temp);\r\n\r\n    const data = {\r\n        humidity,\r\n        temperature,\r\n        weatherState,\r\n        wind: speed + ' m/s',\r\n        city\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nexport default transformWeather;","export const api_key = 'e1c9d186874aa40d250f412ce360ec05';\r\nexport const url_base_weather = 'https://api.openweathermap.org/data/2.5/weather';\r\n","import { url_base_weather, api_key } from './../constant/api_url';\r\n\r\nconst getUrlWeatherByCity = city => {\r\n\r\n    return url_base_weather + '?q=' + city + '&appid=' + api_key;\r\n}\r\n\r\nexport default getUrlWeatherByCity;","import { url_base_weather, api_key } from '../constant/api_url';\r\n\r\nconst getUrlWeatherByCoord = coords => {\r\n\r\n    const { latitude, longitude } = coords;\r\n    return url_base_weather + '?lat=' + latitude + '&lon=' + longitude + '&appid=' + api_key;\r\n}\r\n\r\nexport default getUrlWeatherByCoord;","import React, { Component } from 'react';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './estilos.css';\r\nimport {\r\n    \r\n} from './../constant/weather';\r\nimport transformWeather from '../services/transformWeather';\r\nimport getUrlWeatherByCity from './../services/getUrlWeatherByCity';\r\nimport getUrlWeatherByCoord from './../services/getUrlByCoord';\r\n\r\nclass WeatherLocation extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        const { city, coord } = props;\r\n\r\n        this.state = {\r\n          data: null,\r\n          city,\r\n          coord\r\n        };\r\n    }\r\n\r\n    updateWeatherByCity = () => {\r\n\r\n        const api_weather = getUrlWeatherByCity(this.state.city);\r\n\r\n        fetch(api_weather).then(response => {\r\n\r\n            return response.json();\r\n        }).then(data => {\r\n\r\n            const newData = transformWeather(data);\r\n            this.setState({ data: newData });\r\n        });\r\n    }\r\n\r\n    updateWeatherByCoord = () => {\r\n\r\n        const api_weather = getUrlWeatherByCoord(this.state.coord);\r\n\r\n        fetch(api_weather).then(response => {\r\n\r\n            return response.json();\r\n        }).then(data => {\r\n\r\n            const newData = transformWeather(data);\r\n            this.setState({ data: newData });\r\n        }, error => {\r\n\r\n            console.log(error);\r\n        });\r\n    }\r\n    \r\n\r\n    componentDidMount () {\r\n\r\n        const { city, coord } = this.state;\r\n\r\n        if (city) {\r\n\r\n            this.updateWeatherByCity();\r\n        }\r\n\r\n        if (coord) {\r\n\r\n            this.updateWeatherByCoord();\r\n        }\r\n      \r\n    }\r\n\r\n    render () {\r\n\r\n        const { onWeatherLocationClick } = this.props;\r\n        const { data } = this.state;\r\n        let ciudad = '';\r\n\r\n        if (data) {\r\n            const { city } = data;\r\n            ciudad = city;\r\n        }\r\n\r\n        return (\r\n            <div className='weatherLocationContainer centrar' onClick={onWeatherLocationClick}>\r\n\r\n                <Location city={ciudad} />\r\n                {data ?\r\n                    <WeatherData data={data} /> : \r\n                    <CircularProgress />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nWeatherLocation.propTypes = {\r\n    city: PropTypes.string,\r\n    onWeatherLocationClick: PropTypes.func\r\n}\r\n\r\nexport default WeatherLocation;","import React ,{ Component } from 'react';\r\nimport WeatherLocation from './WeatherLocation';\r\nimport { PropTypes } from 'prop-types';\r\n\r\n\r\nclass LocationList extends Component  {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        const { onSelectedLocation } = this.props;\r\n\r\n        this.state = {\r\n            coord: {\r\n                latitude: null,\r\n                longitude: null\r\n            },\r\n            onSelectedLocation\r\n        };\r\n    }\r\n\r\n    getLocation = () => {\r\n    \r\n        navigator.geolocation.getCurrentPosition((data) => {\r\n    \r\n            const { coords: { latitude, longitude } } = data\r\n            this.setState({ coord: {  latitude, longitude } });\r\n    \r\n        }, (error) => {\r\n    \r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    componentDidMount () {\r\n\r\n        this.getLocation();\r\n    }\r\n\r\n    render () {     \r\n\r\n        const { cities, onSelectedLocation, onSelectedLocationByCoord } = this.props;\r\n        const { coord } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    coord.latitude && coord.longitude ? \r\n                        <WeatherLocation \r\n                            coord={coord}\r\n                            onWeatherLocationClick={() => onSelectedLocationByCoord(coord)}\r\n                        /> \r\n                    : null\r\n                }\r\n                {\r\n                    cities.map((city, index) => \r\n                        <WeatherLocation \r\n                            key={city} \r\n                            city={city} \r\n                            onWeatherLocationClick={() => onSelectedLocation(city)}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLocationList.propTypes = {\r\n    cities: PropTypes.array.isRequired,\r\n    onSelectedLocation: PropTypes.func,\r\n    onSelectedLocationByCoord: PropTypes.func\r\n}\r\n\r\nexport default LocationList;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport LocationList from \"./components/LocationList\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst dataCities = require(\"./constant/city.json\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      seconds: 0,\n      secondsInterval: 1,\n      cities: [\"Madrid, es\", \"Los Angeles, us\"],\n      paramSearch: \"\",\n      placeHolder: \"UbicaciÃ³n\",\n      autocomplete: []\n    };\n  }\n\n  componentDidMount() {\n    setInterval(this.tickTock, this.state.secondsInterval * 1000);\n  }\n\n  handleAddWeatherLocation = () => {\n    const { paramSearch } = this.state;\n\n    if (paramSearch) {\n      const paramApplied = dataCities.filter(\n        element => element.name.toUpperCase() === paramSearch.toUpperCase()\n      );\n\n      if (paramApplied.length === 0) {\n        console.log(\"No se encuentra\");\n      } else {\n        console.log(paramApplied);\n      }\n\n      this.setState({ paramSearch: \"\", autocomplete: paramApplied });\n    } else {\n      this.setState({ placeHolder: \"Error\" });\n    }\n  };\n\n  tickTock = () => {\n    const { seconds, secondsInterval } = this.state;\n    this.setState({ seconds: seconds + secondsInterval });\n  };\n\n  handleSelectionLocation = city => {\n    console.log(city);\n  };\n\n  handleSelectionLocationByCoord = coord => {\n    console.log(coord);\n  };\n\n  render() {\n    const { seconds, cities, autocomplete } = this.state;\n\n    return (\n      <Grid container spacing={8} className=\"grid centrar\">\n        <Grid item xs={12}>\n          <input\n            type=\"text\"\n            onChange={text => {\n              this.setState({\n                paramSearch: text.target.value,\n                placeHolder: \"UbicaciÃ³n\"\n              });\n            }}\n            value={this.state.paramSearch}\n            placeholder={this.state.placeHolder}\n            className=\"inputSearch\"\n          />\n\n          <button onClick={this.handleAddWeatherLocation} className=\"btnSearch\">\n            Buscar\n          </button>\n        </Grid>\n        <Grid item xs={12}>\n          {autocomplete\n            ? autocomplete.map(item => (\n                <div key={item.id} className=\"autocomplete\">\n                  {item.country}, {item.name}\n                </div>\n              ))\n            : null}\n        </Grid>\n        <Grid item xs={12}>\n          <LocationList\n            cities={cities}\n            onSelectedLocation={this.handleSelectionLocation}\n            onSelectedLocationByCoord={this.handleSelectionLocationByCoord}\n          />\n        </Grid>\n        <p>Segundos: {seconds}</p>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}